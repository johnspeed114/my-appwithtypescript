{"version":3,"sources":["components/AddTodoHeading.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["AddTodoHeading","addTodo","useState","newTodo","setNewTodo","onSubmit","e","preventDefault","type","onChange","event","target","value","placeholder","TodoListItem","todo","toggleTodo","handleRemove","className","complete","undefined","checked","text","onClick","id","TodoList","todos","map","initialTodos","uuidv4","App","setTodos","Fragment","selectedTodo","newTodos","console","log","idKey","newList","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAMaA,EAA+D,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAC5DC,mBAAS,IADmD,mBACpFC,EADoF,KAC3EC,EAD2E,KAS5F,OACC,sBAAMC,SAPc,SAACC,GACrBA,EAAEC,iBACFN,EAAQE,GACRC,EAAW,KAIX,SACC,uBACCI,KAAK,OACLC,SAAU,SAACC,GAAD,OAAWN,EAAWM,EAAMC,OAAOC,QAC7CA,MAAOT,EACPU,YAAY,kCCVHC,G,MAA2D,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAC5F,OACC,+BACC,wBAAOC,UAAWH,EAAKI,SAAW,gBAAaC,EAA/C,UACC,uBAAOZ,KAAK,WAAWa,QAASN,EAAKI,SAAUV,SAAU,kBAAMO,EAAWD,MACzEA,EAAKO,QAEP,wBAAQd,KAAK,SAASe,QAAS,kBAAMN,EAAaF,EAAKS,KAAvD,yBCTUC,EAAmD,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOV,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACrF,OACC,6BACES,EAAMC,KAAI,SAACZ,GACX,OAAO,cAAC,EAAD,CAA8BA,KAAMA,EAAMC,WAAYA,EAAYC,aAAcA,GAA7DF,EAAKO,YCR7BM,EAAe,CACpB,CAAEN,KAAM,eAAgBH,UAAU,EAAMK,GAAIK,eAC5C,CAAEP,KAAM,cAAeH,UAAU,EAAOK,GAAIK,gBAsC9BC,EAnCO,WAAO,IAAD,EACC5B,mBAAS0B,GADV,mBACnBF,EADmB,KACZK,EADY,KA2B3B,OACC,eAAC,IAAMC,SAAP,WACC,cAAC,EAAD,CAAgB/B,QAXO,SAACE,GACzB4B,EAAS,GAAD,mBAAML,GAAN,CAAa,CAAEJ,KAAMnB,EAASgB,UAAU,EAAOK,GAAIK,qBAW1D,cAAC,EAAD,CAAUH,MAAOA,EAAOV,WA3BK,SAACiB,GAC/B,IAAMC,EAAWR,EAAMC,KAAI,SAACZ,GAC3B,OAAIA,IAASkB,EACL,2BACHlB,GADJ,IAECI,UAAWJ,EAAKI,WAGVJ,KAGTgB,EAASG,GACTC,QAAQC,IAAIF,IAeqCjB,aARf,SAACoB,GACnC,IAAMC,EAAUZ,EAAMa,QAAO,SAACxB,GAAD,OAAUA,EAAKS,KAAOa,KACnDN,EAASO,UC7BXE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.65d9b71f.chunk.js","sourcesContent":["import React, { FormEvent, useState } from 'react';\n\ninterface AddTodoHeadingProps {\n\taddTodo: AddTodo;\n}\n\nexport const AddTodoHeading: React.FunctionComponent<AddTodoHeadingProps> = ({ addTodo }) => {\n\tconst [ newTodo, setNewTodo ] = useState(''); //this tag string guarantee that this is a string (typescript only!)\n\n\tconst handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t\taddTodo(newTodo);\n\t\tsetNewTodo('');\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tonChange={(event) => setNewTodo(event.target.value)}\n\t\t\t\tvalue={newTodo}\n\t\t\t\tplaceholder=\"Please Enter The Todo Item\"\n\t\t\t/>\n\t\t</form>\n\t);\n};\n","import React from 'react';\n//this ./../ allows to be imported from the parent directory. HOWEVER, we don't need it since we have declaration files on typescript\nimport './TodoListItem.css';\n\ninterface TodoListItemProps {\n\ttodo: Todo;\n\ttoggleTodo: ToggleTodo;\n\thandleRemove: DeleteButton;\n}\n\n//this {todo} destructuring usually with prop would just need to have todo be data types in the interface EASY LIKE!\nexport const TodoListItem: React.FunctionComponent<TodoListItemProps> = ({ todo, toggleTodo, handleRemove }) => {\n\treturn (\n\t\t<li>\n\t\t\t<label className={todo.complete ? 'complete' : undefined}>\n\t\t\t\t<input type=\"checkbox\" checked={todo.complete} onChange={() => toggleTodo(todo)} />\n\t\t\t\t{todo.text}\n\t\t\t</label>\n\t\t\t<button type=\"button\" onClick={() => handleRemove(todo.id)}>\n\t\t\t\tdelete\n\t\t\t</button>\n\t\t</li>\n\t);\n};\n","import React from 'react';\nimport { TodoListItem } from './TodoItem';\n\ninterface TodoListProps {\n\ttodos: Array<Todo>;\n\ttoggleTodo: ToggleTodo;\n\thandleRemove: DeleteButton;\n}\n\nexport const TodoList: React.FunctionComponent<TodoListProps> = ({ todos, toggleTodo, handleRemove }) => {\n\treturn (\n\t\t<ul>\n\t\t\t{todos.map((todo) => {\n\t\t\t\treturn <TodoListItem key={todo.text} todo={todo} toggleTodo={toggleTodo} handleRemove={handleRemove} />;\n\t\t\t})}\n\t\t</ul>\n\t);\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport React, { useState } from 'react';\nimport { AddTodoHeading } from './components/AddTodoHeading';\nimport { TodoList } from './components/TodoList';\n\nconst initialTodos = [\n\t{ text: 'Walk the dog', complete: true, id: uuidv4() },\n\t{ text: 'Take a name', complete: false, id: uuidv4() }\n];\n\nconst App: React.FC = () => {\n\tconst [ todos, setTodos ] = useState(initialTodos);\n\n\tconst toggleTodo: ToggleTodo = (selectedTodo) => {\n\t\tconst newTodos = todos.map((todo) => {\n\t\t\tif (todo === selectedTodo) {\n\t\t\t\treturn {\n\t\t\t\t\t...todo,\n\t\t\t\t\tcomplete: !todo.complete\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn todo;\n\t\t\t}\n\t\t});\n\t\tsetTodos(newTodos);\n\t\tconsole.log(newTodos);\n\t};\n\n\tconst addTodo: AddTodo = (newTodo) => {\n\t\tsetTodos([ ...todos, { text: newTodo, complete: false, id: uuidv4() } ]);\n\t};\n\n\tconst handleRemove: DeleteButton = (idKey) => {\n\t\tconst newList = todos.filter((todo) => todo.id !== idKey);\n\t\tsetTodos(newList);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<AddTodoHeading addTodo={addTodo} />\n\t\t\t<TodoList todos={todos} toggleTodo={toggleTodo} handleRemove={handleRemove} />\n\t\t</React.Fragment>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}